{-# LANGUAGE TypeApplications #-}
module Ergvein.Filters.BtcTest where

import           Test.Tasty.Hspec
import           Data.Maybe
import           Network.Haskoin.Address
import           Network.Haskoin.Block
import           Network.Haskoin.Constants
import           Network.Haskoin.Transaction
import qualified Data.Serialize                as S
import           Data.Text                      ( Text
                                                , unpack
                                                )
import qualified Data.Text.Encoding            as TE
import           Data.ByteString                ( ByteString )
import qualified Data.ByteString               as BS
import qualified Data.ByteString.Base16        as BS16
import           Ergvein.Filters.Btc
import           Ergvein.Text
import           Ergvein.Types.Address          (btcAddrToString')
import           Data.Foldable

-- import Debug.Trace

spec_filterPositive :: Spec
spec_filterPositive = forM_ samples $ \(block, txs, as) -> do
  let bfilter = makeBtcFilter btcTest txs block
      bhash   = headerHash . blockHeader $ block
      bid     = blockHashToHex bhash
  -- traceShowM $ bs2Hex $ encodeBtcAddrFilter bfilter
  describe ("block " ++ show bid) $ do
    it "block filter encodes-decods to same" $ do
      let hx1 = bs2Hex $ encodeBtcAddrFilter bfilter
      let bfilter2 = either (error "decode error") id $ decodeBtcAddrFilter (hex2bs hx1)
      let hx2 = bs2Hex $ encodeBtcAddrFilter bfilter2
      hx1 `shouldBe` hx2
    forM_ as $ \a -> do
      let at = unpack $ btcAddrToString' btcTest $ fromSegWit a
      it ("block filter contains address " ++ at)
        $          applyBtcFilter btcTest bhash bfilter a
        `shouldBe` True
  where samples = zip3 testBlocks testInputTxs testAddresses

spec_filterNegative :: Spec
spec_filterNegative = forM_ samples $ \(block, txs) -> do
  let bfilter = makeBtcFilter btcTest txs block
      bhash   = headerHash . blockHeader $ block
      bid     = blockHashToHex bhash
      at      = unpack $ btcAddrToString' btcTest $ fromSegWit testAddress
  describe ("block " ++ show bid)
    $          it ("block filter should not contain address " ++ at)
    $          applyBtcFilter btcTest bhash bfilter testAddress
    `shouldBe` False
  where samples = zip testBlocks testInputTxs

testBlocks :: [Block]
testBlocks = fmap
  loadBlock
  [ "00000020ddbaf75407886c86a4cae8d6daa6ef0d1102a99d7bc17d4b100c00000000000003c1dc70732b7c6d91128276479e3e0375573d4a3f2173b721c5c035e81e0e83a2ee005ef0ff0f1a998a1b0305010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4c035ef11804a2ee005e08fabe6d6d000000000000000000000000000000000000000000000000000000000000000001000000000000001800000172a502000d2f6e6f64655374726174756d2f00000000020000000000000000266a24aa21a9ed1b13a82aa3ab4e6d6ac153d82d8c7d8f1c532ef01b3ae542c8d64c8d6b325681e62d5402000000001976a914bd3400d71504033fb1e7c947f2e0f55775899f2288ac012000000000000000000000000000000000000000000000000000000000000000000000000001000000019636f66114de423258593c8d41ab2762d95e22c9993c240474d0ba7cde2ef452010000006a47304402200c68ce930269ea92f0829a6a6d167a76b18c9fd8fb8ee5133b2242c7eb63ca7302203854c58342583e6f4d04ef453f10f85a2a4d0c8706090741dff97a49e0e9f57701210345d09b2853f985eda2766a8847fb671fdce8b48a07d8fbb2aa48a2f4f1aeef6bffffffff0240420f00000000001976a9144ec06d007995a2bbaf0251c100eaa083417ee6d388ac96185501000000001976a91475008b6030eda94db83f1d2fb28cf6577d87c2bc88ac0000000001000000000101c81efcbeadb14f515c8fb56913decd896cea458eb6e36369dc80858d4c492ca90000000023220020a344d5ae22e2e041d2269dce688a2f00574722cab0876afc68e1487c7350f64affffffff01b2501e000000000017a9145f360b7ee84d314c2e567b7f64ce28d4cdbfc79b870400483045022100b3ff5890042d586aeaad17f12b5909868e270fc94d2ea40e43506acf20f480080220784966f22bad10732ebc777cb4e0cfaf1386e7ac9c08e1463168735ad91f5bb60147304402200a79ea5c2dac97041e672b44c1cc239af6065982563d69dc84e1b473b115f72b02202a4355029cc8291266cf39e85ac98aa4dedb3b897162ea146a674b4bcfa581c501695221029c3b8946a69f9c5b82b93cf89544d5b56bdde6f663c31dd777111474d50d87af21026e476676e9c8092009e551067e7dac8c057cd34b6b552b56078d76d927a3130d2103eb27f329224f32cb7837ea87a32947affbff7068e133a5b682934a7cbd04848553ae000000000100000000010158215c4790c0952809f0f07a5b01457d3384998079f7e7d32baf418bb1ba64400100000000ffffffff02ae5a19000000000016001498c980338eedc2938c0f47c7af536138866dc39d0000000000000000536a4c500002280700029ee6ec7bed5faf88db46796474ac668de79ec5c018c7e0ae230a4ac3afcd2ebae7b6f26189842b8ac8a41d895e6c5e00ee930405f5e102844bda4f75662be062df035a8aa8c6f56dba3002483045022100fc3153decc81de90e290657dbb2f269bbb3d7485961bd6bb27f69844a8eb9bde02202e0c703ae9cc6367914a7ba04f95414de017a45b51eea63e9c2659c9ba8b5d1b012102916c6da5139821053bd5145a052d5bb803da5b588425882ddce9c9194afb722a0000000001000000000101adb24d3b82f21c9a974c7c5c6216d28d681d6632d7418196187e2b05543392050000000000ffffffff02ebf734000000000016001454e850ff81fdc8ff2ae88c95d5e3d73f611ac6bc0000000000000000536a4c500002280700029ee6ec7bed5faf88db46796474ac668de79ec5c018c7e0ae230a4ac3afcd2ebae7b6f26189842b8ac8a41d895e6c5e00ee930405f5e102844bda4f75662be062df035a8aa8c6f56dba3002483045022100ef5f2d3f01f90210cf9e9e65ca75ca1264c5c6f76e6f9d3537dbd84399c9946302206a6fff623253a8708a446100fb8c1b6dddb3683eba2996647d8998c57feba5f201210259c87de12afef1bee19ed3e1380a73236a9d774a9c107fdd35e04ae346b7a57600000000"
  , ""
  ]
  where loadBlock = either error id . S.decode @Block . hex2bs

testInputTxs :: [[Tx]]
testInputTxs = (fmap . fmap)
  loadTx
  [ [ "01000000000101cb6d6ca7e36725d98592c142bc8e54b53e81d1079d0a45fca91ae9640f4faf2f0000000000ffffffff020000000000000000536a4c50000228120002ca4f86db7d73e73ba71e587a6b46f7ec375c2fecc374ac668de79ec5c018b1cfc9a811cf32c7ddfd8f1c31bfb5db5e00f2230405f5e153929d764f75662be062df035a8aa8c6f56dba3094591900000000001600148765bf25275f6e034e5c61cfadf7a76a7e5dbca90247304402207f1cdcf37a5f7fb04a2e989f390bad38dd31536899388fcb39ea877ac662a39a02205835f15cc37d89a3f92cf3a0a006c27bb662f2eda93791a66fd31b97069cdd24012102916c6da5139821053bd5145a052d5bb803da5b588425882ddce9c9194afb722a00000000"
  , "01000000000101f54d73a0eb37ac94f4d630d11dd5665bb7762affec377de13a55bc0445e182350000000000ffffffff02d1f6340000000000160014728227dfd4dfe62eb788fac48917df9ff235fccf0000000000000000536a4c50000228120002ca4f86db7d73e73ba71e587a6b46f7ec375c2fecc374ac668de79ec5c018b1cfc9a811cf32c7ddfd8f1c31bfb5db5e00f2230405f5e153929d764f75662be062df035a8aa8c6f56dba300247304402206d747cb0da86f6a140c5e685f4c926932ced93bcd3726b68b0d9f50fbe87682502207cadaabd39882109c76302d6eab003b87ca90d81ed15f2231b7c17e9bf13e36b01210259c87de12afef1bee19ed3e1380a73236a9d774a9c107fdd35e04ae346b7a57600000000"
    ]
  , [ "02000000000101cb928b3d568186d4a167167ba8959e253a320b92499ae926962d8ffcb985dc0001000000171600143332a0772b4b9ea8f84a5fd0a62df51f6dfacf7cfeffffff020852000000000000160014cf6d0a6f8b1dd2a1fc53147fd3ae59edad0099f8989c7c0000000000160014161a71c89d7baca9420212081b5ed5e3fedd349f0247304402207a2805836f7446c434b883015e88a4fa6f1dd6bf67f7f3f7a797f64aecc45b1002204d1b245194d9c0f670210a79e412957452f9ce5fd4a0585c4d6c3d2c1dfeec8401210315ecc79737cc7a484615e8e287d7d53d5166e019f52dbc6387a7c4c2cb27ca1557f11800"
  ]]

testAddresses :: [[SegWitAddress]]
testAddresses = (fmap . fmap)
  loadAddress
  [ [ "tb1qnrycqvuwahpf8rq0glr675mp8zrxmsua32u482"
    , "tb1q2n59pluplhy072hg3j2atc7h8as3434uw4wv02"
    , "tb1qsajm7ff8tahqxnjuv886maa8dfl9m09fm674pe"
    ]
  , [ "tb1qal6enq02jpmgv7d08cj7a0ng8xlneezrz5g98q"
    , "tb1ql4x827apmcrh5nlm75pknutjya4f2sy05l23yc"
    , "tb1qzcd8rjya0wk2jsszzgypkhk4u0ld6dylga9ypz"
    ]
  ]

testAddress :: SegWitAddress -- that isn't containted in test blocks
testAddress = loadAddress "tb1qw508d6qejxtdg4y5r3zarvary0c5xw7kxpjzsx"

loadAddress :: Text -> SegWitAddress
loadAddress t =
  fromMaybe (error "Failed to parse address")
    $   guardSegWit
    =<< stringToAddr btcTest t

loadTx :: Text -> Tx
loadTx = either error id . S.decode @Tx . hex2bs
